Rabin-Karp Algorithm for Pattern Searching

===============================================
Q)Given a text txt[0..n-1] and a pattern pat[0..m-1], write a function search(char pat[], char txt[]) that prints all occurrences of pat[] in txt[]. You may assume that n > m.

Rabin Karp algorithm needs to calculate hash values for following strings.

1) Pattern itself.
2) All the substrings of text of length m.

hash( txt[s+1 .. s+m] ) = ( d ( hash( txt[s .. s+m-1]) â€“ txt[s]*h ) + txt[s + m] ) mod q

d: Number of characters in the alphabet
q: A prime number
h: d^(m-1) %q
====================================================================
code c++

#include<bits/stdc++.h>
using namespace std;

const unsigned PRIME_BASE 257;  // Characters in string [0..256] +1
const unsigned PRIME_MOD  1000000007;

unsigned hash(const string &s)
{
     long long ret;
     for(int i=0;i<s.size();i++)
       {
             ret=ret*PRIME_BASE +s[i];
             ret %=PRIME_MOD;
        }
}


=======================================================



#include<bits/stdc++.h>
using namespace std;
const int base=29;
const int prime=1000000009;
string s;
void robinkarp(long long *hash,long long *power)
{
     power[0]=1;
     hash[0]=s[0];
     for(int i=1;i<s.length();i++)
     {
         power[i]=(power[i-1]*base)%prime;
         hash[i]=(hash[i-1]*base + s[i])%prime;
     }
     for(int i=0;i<s.length();i++)
        cout<<hash[i]<<" ";
}
long long gethash(long long *hash,long long *power,int l,int r)
{
    if(l==0)
        return hash[r];
    else
       return (hash[r]- (hash[l-1]*power[r-l+1])%prime + prime) %prime;
    
}
int main()
{
 int i,j,n;
 cin>>s;
 cin>>n;
 long long hash[100000];
 long long power[100000];
 robinkarp(hash,power);
 while(n--){
     cin>>i>>j;
 long long hashval=gethash(hash,power,i,j);
 cout<<hashval<<endl;
 }
 
}








