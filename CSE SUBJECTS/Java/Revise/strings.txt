Each time we create a String literal, the JVM checks the string pool first.
If the string literal already exists in the pool, a reference to the pool instance is 
returned. If string does not exist in the pool, a new string object is created, and is
placed in the pool. String objects are stored in a special memory area known as string 
pool inside the heap memory.


String Comparison
        
    Using equals() method
    Using == operator
    By CompareTo() method


Using == operator

    The double equal (==) operator compares two object references to check whether they 
    refer to same instance.

    This also, will return true on successful match else returns false.

            public class Demo{    
                public static void main(String[] args) {  
                    String s1 = "Java";
                    String s2 = "Java";
                    String s3 = new String ("Java");
                    boolean b = (s1 == s2);     //true
                    System.out.println(b);
                    b =	(s1 == s3);      //false
                    System.out.println(b);  
                }  
            }  



By compareTo() method
    String compareTo() method compares values and returns an integer value which tells if 
    the string compared is less than, equal to or greater than the other string. 
    It compares the String based on natural ordering i.e alphabetically. Its general syntax is.


Java String class functions

        charAt() method
                String charAt() function returns the character located at the specified index.


        indexOf() method
            String indexOf() method returns the index of first occurrence of a substring or
            a character


        length() method
            String length() function returns the number of characters in a String.


        substring() method
            String substring() method returns a part of the string. substring() method has two override methods.

            1. public String substring(int begin);

            2. public String substring(int begin, int end);


        contains()Method
                String contains() method is used to check the sequence of characters in the 
                given string.
                It returns true if a sequence of string is found else it returns false.

    

********************************************************************************************

StringBuffer class in Java



    StringBuffer class is used to create a mutable string object. 


        class Test {
            public static void main(String args[])
            {
                String str = "study";
                str.concat("tonight");
                System.out.println(str);      // Output: study

                StringBuffer strB = new StringBuffer("study");
                strB.append("tonight");
                System.out.println(strB);    // Output: studytonight
            }
        }





    insert()
        This method inserts one string into another. Here are few forms of insert() method.

        StringBuffer insert(int index, String str)
        StringBuffer insert(int index, int num)
        StringBuffer insert(int index, Object obj)




    reverse()
        This method reverses the characters within a StringBuffer object.







********************************************************************************************

Java StringBuilder class
        StringBuilder is identical to StringBuffer except for one important difference that
        it is not synchronized, which means it is not thread safe.








********************************************************************************************
Java String tokenizer
        2. StringTokenizer(String str, String delim)

        3. StringTokenizer(String str, String delim, booleanreturnValue)

        Following are the methods in string tokenizer
            
            1. booleanhasMoreTokens()

            2. String nextToken()

            3. String nextToken(String delim)

            4. booleanhasMoreElements()

            5. Object nextElement()

            6. intcountTokens()




                        
                import java.util.*;
                public class TokenDemo2{
                    public static void main(String args[])
                    {
                        String a= " : ";
                        String b= "Welcome : to : studytonight : . : How : are : You : ?";
                        StringTokenizer c = new StringTokenizer(b, a);
                        int count1 = c.countTokens();
                        for (inti = 0; i<count1; i++)
                            System.out.println("token [" + i + "] : "
                                    + c.nextToken());
                        StringTokenizer d= null;
                        while (c.hasMoreTokens())
                            System.out.println(d.nextToken());
                    }
                }
                    

































