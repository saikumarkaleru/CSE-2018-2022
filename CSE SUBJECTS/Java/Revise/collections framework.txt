collections 
    List
    Queue
    Set
     ==================No Map==========================================

     boolean add(E e)	                            
     boolean addAll(Collection<? extends E> c)	
     boolean remove(Object element)	           
     boolean removeAll(Collection<?> c)	        
     boolean removeIf(Predicate<? super E> filter)	
     boolean retainAll(Collection<?> c)	

     int size()	-----------------------------------------------------
     void clear()	--------------------------------------------------------
     boolean contains(Object element)	-------------------------------
     boolean containsAll(Collection<?> c)	
     Iterator iterator()	
     Object[] toArray()	               It converts collection into array.
     public <T> T[] toArray(T[] a)                It converts collection into array. Here, the runtime type of the returned array is that of the specified array.

     boolean isEmpty()	It checks if collection is empty.

     default Stream<E> stream()	It returns a sequential Stream with the collection as its source.

     public boolean equals(Object element)	It matches two collections.

     ==================================================================================================================



Iterator interface

Iterator interface provides the facility of iterating the elements in a forward direction only.

Methods of Iterator interface
There are only three methods in the Iterator interface. They are:

No.	Method	               Description
1	public boolean hasNext()	It returns true if the iterator has more elements otherwise it returns false.
2	public Object next()	It returns the element and moves the cursor pointer to the next element.
3	public void remove()	It removes the last elements returned by the iterator. It is less used.

=====================================================


List Interface


     List interface is implemented by the classes ArrayList, LinkedList, Vector, and Stack.

     List <data-type> list1= new ArrayList();  
     List <data-type> list2 = new LinkedList();  
     List <data-type> list3 = new Vector();  
     List <data-type> list4 = new Stack();  


ArrayList
     E get(int index)	 fetch the element from the particular position of the list.
     boolean contains(Object o)	It returns true if the list contains the specified element

     E remove(int index)	 remove the element present at the specified position in the list.

     boolean remove(Object o)	 remove the first occurrence of the specified element.
     void sort(Comparator<? super E> c) 	 sort the elements of the list on the basis of specified comparator.

     E set(int index, E element)	 replace the specified element in the list, present at the specified position.



========================================================================================



Queue Interface

     Queue interface can be instantiated as:

     Queue<String> q1 = new PriorityQueue();  
     Queue<String> q2 = new ArrayDeque();  

     Object poll()	
           retrieves and removes the head of this queue, 
          or returns null if this queue is empty.

     Object element()	 retrieves, but does not remove, the head of this queue.


     Object peek()	
           retrieves, 
          but does not remove, the head of this queue, or  returns null if this queue is empty.


     Object remove()	 retrieves and removes the head of this queue

     ===================
     Java Deque Interface

          ArrayDeque class



=========================================================================

Set Interface

     Set<data-type> s1 = new HashSet<data-type>();  
     Set<data-type> s2 = new LinkedHashSet<data-type>();  
     Set<data-type> s3 = new TreeSet<data-type>();  

============================================================================
Java HashSet
     HashSet contains unique elements only.
     HashSet allows null value.
     HashSet class is non synchronized.
     HashSet doesn't maintain the insertion order. Here, elements are inserted on the basis of their hashcode.
     HashSet is the best approach for search operations

     constructor has collection parameter bro...
     HashSet(Collection<? extends E> c)	      Init using the elements of the collection c.


=====================================================================
Java TreeSet class

     Java TreeSet class contains unique elements only like HashSet.
     Java TreeSet class access and retrieval times are quiet fast.
     Java TreeSet class doesn't allow null element.
     Java TreeSet class is non synchronized.
     Java TreeSet class maintains ascending order.


     TreeSet(Collection<? extends E> c)	               The elements of the collection c.
     TreeSet(Comparator<? super E> comparator)	      construct an empty tree set that will be sorted according to given comparator.
     TreeSet(SortedSet<E> s)	                         TreeSet that contains the elements of the given SortedSet.


     E higher(E e)	
          It returns the closest greatest element of the specified element from the set, 
          or null there is no such element.
     Iterator iterator()	
           iterate the elements in ascending order.
     E lower(E e)
     	It returns the closest least element of the specified element from the set,
           or null there is no such element.

     E first()	It returns the first (lowest) element currently in this sorted set.
     E last()	It returns the last (highest) element currently in this sorted set.

     Iterator descendingIterator()	It is used iterate the elements in descending order.


     E floor(E e)	
          It returns the equal or closest least element of the specified element
          from the set, or null there is no such element.

     E ceiling(E e)	
          It returns the equal or closest greatest element of the specified element from the set, 
          or null there is no such element.

     SortedSet tailSet(E fromElement)	
          It returns a set of elements that are greater than or equal to the specified element.
     
     SortedSet headSet(E toElement)	
          It returns the group of elements that are less than the specified element.


     NavigableSet descendingSet()	It returns the elements in reverse order.
     SortedSet subSet(E fromElement, E toElement))	
          It returns a set of elements that lie between the given range which 
          includes fromElement and excludes toElement.





========================================================================================


========================================================================================

========================================================================================

========================================================================================


========================================================================================

Map interface


     There are two interfaces for implementing Map in java: 
          Map and SortedMap, 
     and three classes: 
          HashMap, LinkedHashMap, and TreeMap.

     V put(Object key, Object value)	      insert an entry in the map.
     void putAll(Map map)	                insert the specified map in the map.
     V putIfAbsent(K key, V value)      	  It inserts the specified value with the specified key in the map only if it is not already specified.

     V remove(Object key)	                 to delete an entry for the specified key.
     boolean remove(Object key, Object value)	It removes the specified values with the associated specified keys from the map.

     Set keySet()	                         It returns the Set view containing all the keys.
     Set<Map.Entry<K,V>> entrySet()	 It returns the Set view containing all the keys and values.
     void clear()	It is used to reset the map.

     boolean containsValue(Object value)	This method returns true if some value equal to the value exists within the map, else return false.
     boolean containsKey(Object key)	      
               This method returns true if some key equal to the 
               key exists within the map, else return false.
     void forEach(BiConsumer<? super K,? super V> action)	
               It performs the given action for each entry in the map until all 
               entries have been processed or the action throws an exception.
     V get(Object key)	     
          This method returns the object that contains the value associated with the key.
     V getOrDefault(Object key, V defaultValue)	
          It returns the value to which the specified key is mapped,
           or defaultValue if the map contains no mapping for the key.

     boolean isEmpty()	This method returns true if the map is empty; returns false if it contains at least one key.

     V replace(K key, V value)	It replaces the specified value for a specified key.
     
     Collection values()	          It returns a collection view of the values contained in the map.
     int size()	               This method returns the number of entries in the map

=================================================================================================


Map.Entry Interface

     Entry is the subinterface of Map. So we will be accessed it by Map.Entry name. 
     It returns a collection-view of the map, 
     whose elements are of this class. It provides methods to get key and value.

     K getKey()	It is used to obtain a key.
     V getValue()	It is used to obtain value.
     V setValue(V value)	I    
          t is used to replace the value corresponding to this entry with the specified value.

          /Non-generic  
     import java.util.*;  
     public class MapExample1 {  
     public static void main(String[] args) {  
     Map map=new HashMap();  
     //Adding elements to map  
     map.put(1,"Amit");  
     map.put(5,"Rahul");  
     map.put(2,"Jai");  
     map.put(6,"Amit");  
     //Traversing Map  
     Set set=map.entrySet();//Converting to Set so that we can traverse  
     Iterator itr=set.iterator();  
     while(itr.hasNext()){  
          //Converting to Map.Entry so that we can get key and value separately  
          Map.Entry entry=(Map.Entry)itr.next();  
          System.out.println(entry.getKey()+" "+entry.getValue());  
     }  
     }  
     }  
====================================================================
Java Map Example: Generic (New Style)
          import java.util.*;  
               class MapExample2{  
                    public static void main(String args[]){  
                    Map<Integer,String> map=new HashMap<Integer,String>();  
                    map.put(100,"Amit");  
                    map.put(101,"Vijay");  
                    map.put(102,"Rahul");  
                    //Elements can traverse in any order  
                    for(Map.Entry m:map.entrySet()){  
                    System.out.println(m.getKey()+" "+m.getValue());  
          }  
          }  
          }  


Java Map Example: comparingByKey()
import java.util.*;  
class MapExample3{  
 public static void main(String args[]){  
Map<Integer,String> map=new HashMap<Integer,String>();          
      map.put(100,"Amit");    
      map.put(101,"Vijay");    
      map.put(102,"Rahul");   
      //Returns a Set view of the mappings contained in this map        
      map.entrySet()  
      //Returns a sequential Stream with this collection as its source  
      .stream()  
      //Sorted according to the provided Comparator  
      .sorted(Map.Entry.comparingByKey())  
      //Performs an action for each element of this stream  
      .forEach(System.out::println);  
 }  
}  


Java Map Example: comparingByValue()
import java.util.*;  
class MapExample5{  
 public static void main(String args[]){  
Map<Integer,String> map=new HashMap<Integer,String>();          
      map.put(100,"Amit");    
      map.put(101,"Vijay");    
      map.put(102,"Rahul");    
      //Returns a Set view of the mappings contained in this map    
      map.entrySet()  
      //Returns a sequential Stream with this collection as its source  
      .stream()  
      //Sorted according to the provided Comparator  
      .sorted(Map.Entry.comparingByValue())  
      //Performs an action for each element of this stream  
      .forEach(System.out::println);  
 }  
}  

===========================================================================


Java Stack



Method	Modifier and Type	Method Description
empty()	boolean	          The method checks the stack is empty or not.
push(E item)	E	          The method pushes (insert) an element onto the top of the stack.
pop()	E	               The method removes an element from the top of the stack and returns the same element as the value of that function.
peek()	E	               The method looks at the top element of the stack without removing it.
search(Object o)	int	     The method searches the specified object and returns the position of the object.



========================================================================================================



Java Strings:

     char charAt(int index)	     returns char value for the particular index
     int length()	               returns string length

     String substring(int beginIndex)	returns substring for given begin index. 
     boolean contains(CharSequence s)	returns true or false after matching the sequence of char value.

     boolean equals(Object another)	checks the equality of string with the given object.

     boolean isEmpty()	          checks if string is empty.
     String concat(String str)	concatenates the specified string

     String replace(char old, char new)	replaces all occurrences of the specified char value.
	String replace(CharSequence old, CharSequence new)	replaces all occurrences of the specified CharSequence
     String[] split(String regex)	returns a split string matching regex.

     int indexOf(int ch)	                         returns the specified char value index.
	int indexOf(int ch, int fromIndex)	          returns the specified char value index starting with given index.
	int indexOf(String substring)	               returns the specified substring index.
	int indexOf(String substring, int fromIndex)	returns the specified substring index starting with given index.

     String trim()  	removes beginning and ending spaces of this string.
     static String valueOf(int value)	     converts given type into string. It is an overloaded method.


======================================================================================================================================


---------------
Java Stream API
----------------
      A stream is a sequence of objects that supports various methods which can be pipelined to produce the desired result.\



map: 
     The map method is used to returns a stream consisting of the results of applying the given function to the elements of this stream.
     List number = Arrays.asList(2,3,4,5);
     List square = number.stream().map(x->x*x).collect(Collectors.toList());

filter: 
     The filter method is used to select elements as per the Predicate passed as argument.
     List names = Arrays.asList("Reflection","Collection","Stream");
     List result = names.stream().filter(s->s.startsWith("S")).collect(Collectors.toList());

sorted: 
     The sorted method is used to sort the stream.
     List names = Arrays.asList("Reflection","Collection","Stream");
     List result = names.stream().sorted().collect(Collectors.toList());

     List<Employee> employees =  empList.stream()
                                        .sorted((e1, e2) -> e1.getName().compareTo(e2.getName()))
                                        .collect(Collectors.toList())
min:
     List<Integer> list = Arrays.asList(-9, -18, 0, 25, 4);

     // Using stream.min() to get minimum
     // element according to provided Integer Comparator
     Integer var = list.stream().min(Integer::compare).get();
     
     	Integer minnum = Stream.of(10, 13, 4, 9, 2, 100)
            	                    .min( new Comparator<Integer>() {
                                                    public int compare(Integer i1,Integer i2)
                                                    {
                                                        return i1.compareTo(i2);
                                                    }
                                                }
                                        )
                                   .get();

          Integer minnum = Stream.of(10, 13, 4, 9, 2, 100)
                              .min((i1, i2)->
                                                  {
                                                       return i1.compareTo(i2);
                                                  }
                                   )
                              .get();

          String maxFirstChar =   Stream.of("Aryan", "Tom", "Harry", "Steve")
                                        .max(Comparator.comparing(String::valueOf))
                                        .get();

          String minFirstChar = Stream.of("Aryan", "Tom", "Harry", "Steve")
                                                  .min((a,b) ->{
                                                  return a.compareTo(b);  
                                                  })
                                        .get();

distinct()
     Returns a stream consisting of the distinct elements (according to Object.equals(Object)) of this stream.



peek:
     Returns a stream consisting of the elements of this stream, additionally performing 
     the provided action on each element as elements are consumed from the resulting stream
     
     Stream.of("one", "two", "three", "four")
         .filter(e -> e.length() > 3)
         .peek(e -> System.out.println("Filtered value: " + e))
         .map(String::toUpperCase)
         .peek(e -> System.out.println("Mapped value: " + e))
         .collect(Collectors.toList());

collect

-----------------------------------------------------------------------------
Terminal Operations:
------------------------------------------------------------------------------

     collect:
          The collect method is used to return the result of the intermediate operations performed on the stream.
          List number = Arrays.asList(2,3,4,5,3);
          Set square = number.stream().map(x->x*x).collect(Collectors.toSet());


     forEach: 
          The forEach method is used to iterate through every element of the stream.
          List number = Arrays.asList(2,3,4,5);
          number.stream().map(x->x*x).forEach(y->System.out.println(y));


     reduce: 
          Parameters:
               identity - the identity value for the accumulating function
               accumulator - an associative, non-interfering, stateless function for combining two values
          
          The reduce method is used to reduce the elements of a stream to a single value.
          
          The reduce method takes a BinaryOperator as a parameter.

          List number = Arrays.asList(2,3,4,5);
          int even = number.stream().filter(x->x%2==0).reduce(0,(ans,i)-> ans+i);

     count()
           Long empCount =  empList.stream()
                                   .filter(e -> e.getSalary() > 200000)
                                   .count();

     sum()

          Summing a stream of numbers can be expressed as:

          Integer sum = integers.reduce(0, (a, b) -> a+b)
                         (or)
          Integer sum = integers.reduce(0, Integer::sum);









