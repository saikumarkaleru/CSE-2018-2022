final variable -----------------------To create constant values
final methods------------------preventing method overriding
final class ----------------      prevent inheritance

===========================================================================================

Initializing a final variable

    Once you declare a final variable,
    it is a must to initialize it.

    You can initialize the final instance variable −

    At the time of declaration as.
            public final String name = "Raju";
            public final int age = 20;

    Within an instance (non-static) block.
            {
            this.name = "Raju";
            this.age = 20;
            }

    Within a default constructor.
            
            public final String name;
            public final int age;
            public Student(){
            this.name = "Raju";
            this.age = 20;
            }

=========================================
    // a final variable
    final int THRESHOLD = 5;
    // a blank final variable
    final int THRESHOLD;
    // a final static variable PI
    static final double PI = 3.141592653589793;
    // a  blank final static  variable
    static final double PI;

Initializing a final variable :

    We must initialize a final variable, otherwise compiler will throw compile-time error.
    A final variable can only be initialized once, either via an initializer or an assignment statement. There are three ways to initialize a final variable :

    You can initialize a final variable when it is declared.This approach is the most common.
    A final variable is called blank final variable,if it is not initialized while declaration. 
    Below are the two ways to initialize a blank final variable.
        
    A blank final variable can be initialized inside instance-initializer block 
    or inside constructor. If you have more than one constructor in your class then 
    it must be initialized in all of them, otherwise compile time error will be thrown.
    
    A blank final static variable can be initialized inside static block



================================================================================================

final variable

    The final keyword, when applied to fields of a Java class, has nothing to do with inheritance. 
    Instead, it indicates that outside of the constructor, that field cannot be reassigned



=======================================================================================
final method:

    When a method is declared as final then it cannot be overridden by subclasses.
    The Object class does this—a number of its methods are final. 
    The following fragment illustrates final keyword with a method: 

        class A 
        {
            final void m1() 
            {
                System.out.println("This is a final method.");
            }
        }

        class B extends A 
        {
            void m1()
            { 
                // ERROR! Can't override.
                System.out.println("Illegal!");
            }
        }

====================================================================
final class:
    When a class is declared as final then it cannot be subclassed i.e.
     no any other class can extend it. This is particularly useful, 
    for example, when creating an immutable class like the predefined String class.










